
package loginandsignup;
import javax.swing.*;
import java.awt.*;
import java.util.ArrayList;
import java.util.Random;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import java.io.FileWriter;
import java.io.IOException;
import java.util.List;
import javax.swing.JOptionPane;

/**
 *
 * @author Sihle Mzamo
 */
public class Messages extends javax.swing.JFrame {
    ArrayList<String> messageToSend = new ArrayList<>();
    ArrayList<String> messageToSendLater = new ArrayList<>();
    private ArrayList<String> messageSent = new ArrayList<>();
    ArrayList<MessagesJSON> jsonMessages = new ArrayList<>();

 
    public Messages() {
        initComponents();
    String reportOption = JOptionPane.showInputDialog(
    
    "Message Report:\n" +
    "a. Display sender and recipient of all sent messages\n" +
    "b. Display the longest sent message\n" +
    "c. Search for a message by ID\n" +
    "d. Search messages by recipient\n" +
    "e. Delete a message by hash\n" +
    "f. Display full details of all sent messages"
);

if (reportOption != null) {
    switch (reportOption.toLowerCase()) {
        case "a":
            displaySendersAndRecipients();
            break;
        case "b":
            displayLongestMessage();
            break;
        case "c":
            searchMessageById();
            break;
        case "d":
            searchMessagesByRecipient();
            break;
        case "e":
            deleteMessageByHash();
            break;
        case "f":
            displayFullMessageDetails();
            break;
        default:
            JOptionPane.showMessageDialog(null, "Invalid option");
    }
}
    }
    

    public void Welcome(String message, ImageIcon icon, int durationMillis, int iconWidth, int iconHeight){
        Image image = icon.getImage();
        Image scaledImage = image.getScaledInstance(iconWidth, iconHeight, Image.SCALE_SMOOTH);
        ImageIcon scaledIcon = new ImageIcon(scaledImage);
        
        JWindow welcomePopUp = new JWindow();
         
        welcomePopUp.setSize(300, 200);
        welcomePopUp.setLayout(new BorderLayout());
        
        JLabel iconLabel = new JLabel(scaledIcon);
        iconLabel.setHorizontalAlignment(SwingConstants.CENTER);
        JLabel textLabel = new JLabel(message, SwingConstants.CENTER);
        textLabel.setFont(new Font("Arial", Font.BOLD, 14));

        welcomePopUp.add(iconLabel, BorderLayout.CENTER);
        welcomePopUp.add(textLabel, BorderLayout.SOUTH);
        welcomePopUp.setLocationRelativeTo(null);
        welcomePopUp.setVisible(true);

        Timer closeTimer = new Timer(durationMillis, e -> welcomePopUp.dispose());
        closeTimer.setRepeats(false);
        closeTimer.start();

    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel3.setBackground(new java.awt.Color(0, 255, 255));

        jLabel1.setFont(new java.awt.Font("Sylfaen", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Welcome To Kiwibuzz: ");

        jButton1.setBackground(new java.awt.Color(255, 255, 255));
        jButton1.setForeground(new java.awt.Color(0, 255, 255));
        jButton1.setText("Send Messages");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(255, 255, 255));
        jButton2.setForeground(new java.awt.Color(0, 255, 255));
        jButton2.setText("View Messages");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(255, 255, 255));
        jButton3.setForeground(new java.awt.Color(255, 0, 0));
        jButton3.setText("Quit");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel2.setBackground(new java.awt.Color(0, 255, 255));
        jLabel2.setFont(new java.awt.Font("Sylfaen", 3, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("The Kulumaring");

        jButton4.setBackground(new java.awt.Color(255, 255, 255));
        jButton4.setForeground(new java.awt.Color(0, 255, 255));
        jButton4.setText("View Active Messages");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setBackground(new java.awt.Color(255, 255, 255));
        jButton5.setForeground(new java.awt.Color(0, 255, 255));
        jButton5.setText("Total Messages");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(153, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(143, 143, 143))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(282, 282, 282)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(101, 101, 101)
                .addComponent(jButton4)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(400, 400, 400)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(181, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(43, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    messageLoop();
    }//GEN-LAST:event_jButton1ActionPerformed
    public boolean isValidMessageNumber(String input) {
        try{
           int num = Integer.parseInt(input);
            return num <= 10 && num > 0;
        }
        catch(NumberFormatException e){
                   return false;
            }
       
    }
    public void featureComing(){
        JOptionPane.showMessageDialog(this, "Feature coming soon");
    }
        public void messageLoop(){
            String userID = JOptionPane.showInputDialog("Enter the username of the person you wish to message:");
            if (userID == null || userID.trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, "User ID cannot be empty.");
                return;
    }
    
        String userPhoneNumber = JOptionPane.showInputDialog("Enter your phone number:");
            if (userPhoneNumber == null || userPhoneNumber.trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Phone number cannot be empty.");
                return;
    }

        String messageNumInput = JOptionPane.showInputDialog("Please enter the number of messages you wish to send");
        int numMessages;
        
        try {
            numMessages = Integer.parseInt(messageNumInput);
            if (numMessages <= 0 || numMessages > 10) {
                JOptionPane.showMessageDialog(this, "Please enter a number between 1 and 10.");
                return;
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid number entered.");
            return;
        }
        collectMessages(numMessages,userPhoneNumber,userID);
        }

        public void collectMessages(int count, String phone, String identifier){
        for (int i = 1; i <= count; i++) {
            String message = JOptionPane.showInputDialog("Enter message #" + i + ":");
            if (message == null ) {
                JOptionPane.showMessageDialog(this, "Message entry cancelled.");
                return;
            }
            if (message.trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Message can not be empty");
                i--;
                continue;
            }
            if (message.length() > 250) {
                JOptionPane.showMessageDialog(this, "Message exceeds 250 characters.");
                i--;
                continue;
            }
            String messageID = messageID();
            String hash = messageHash(messageID, i, message);
            int choice = messageReview(i, message, messageID, hash);

            switch (choice) {
                case 1 -> {
                    String fullMessage = "ID: " + messageID + " | Hash: " + hash + " | Message: " + message;
                    messageToSend.add(fullMessage);
                    messageSent.add(fullMessage);
                }
                case 2 -> messageToSendLater.add("ID: " + messageID + " | Hash: " + hash + " | Message: " + message);
                default -> JOptionPane.showMessageDialog(this, "Message #" + i + " disregarded.");
            }
            }
            JOptionPane.showMessageDialog(this, messageToSend.size() + " message(s) ready to send.\n" + messageToSendLater.size() + " saved to send later.");
            for (String fullMessage : messageSent) {
            String[] parts = fullMessage.split(" \\| ");
            if (parts.length == 3) {
                String id = parts[0].substring(4);   
                String hash = parts[1].substring(6);   
                String content = parts[2].substring(9); 
                jsonMessages.add(new MessagesJSON(id, hash, content));
            }
        }
        messageJSONsave(jsonMessages, "messages.json");
        }
            
   public String messageID(){
        Random random = new Random();
        StringBuilder idBuilder = new StringBuilder();

        for (int i = 0; i < 10; i++) {
            idBuilder.append(random.nextInt(10));
        }

        return idBuilder.toString();
    }
   public String messageHash(String messageID, int messageNumber, String messageText) {
        String[] words = messageText.trim().split("\\s+");
        String firstWord = words[0];
        String lastWord = words[words.length - 1];
        String hash = messageID.substring(0, 2) + ":" + messageNumber + ":" + firstWord + lastWord;
        return hash.toUpperCase();
}
   public int messageReview(int i, String message, String messageID, String messageHash) {
        Object[] options = {"Disregard", "Send Now", "Send Later"};

        return JOptionPane.showOptionDialog(this, "Review Message #" + i + ":\n\n" + message + "\n\nID: " + messageID + "\nHash: " + messageHash, "Review Message", JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[1]);
    }
   
   public void messageTotal() {
        int total = messageSent.size();
        String message = "Total number of messages sent: " + total;
        JOptionPane.showMessageDialog(this, message, "Message Count", JOptionPane.INFORMATION_MESSAGE);       
}
   public void messagePrint() {
        if (messageSent.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No messages have been sent during this session.");
            return;
        }
        
        StringBuilder messageLog = new StringBuilder("Sent Messages:\n\n");
        int count = 1;
        for (String msg : messageSent) {
            messageLog.append(count++).append(". ").append(msg).append("\n\n");
        }

        JTextArea textArea = new JTextArea(messageLog.toString());
        textArea.setEditable(false);
        JScrollPane scrollPane = new JScrollPane(textArea);
        scrollPane.setPreferredSize(new Dimension(500, 300));

        JOptionPane.showMessageDialog(this, scrollPane, "Messages Sent", JOptionPane.INFORMATION_MESSAGE);
}
   public void messageJSONsave(List<MessagesJSON> messages, String filePath) {
        Gson gson = new GsonBuilder().setPrettyPrinting().create();
        try {
            FileWriter writer = new FileWriter(filePath);
            gson.toJson(messages, writer);
            writer.close();
            java.io.File file = new java.io.File(filePath);
            String absolutePath = file.getAbsolutePath();
            JOptionPane.showMessageDialog(this, "Messages saved to:\n" + absolutePath);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error saving messages: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void displaySendersAndRecipients() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    private void displayLongestMessage() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    private void searchMessageById() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    private void searchMessagesByRecipient() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    private void deleteMessageByHash() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    private void displayFullMessageDetails() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
    
    class MessagesJSON {
        private String id;
        private String hash;
        private String content;

        public MessagesJSON(String id, String hash, String content) {
            this.id = id;
            this.hash = hash;
            this.content = content;
        }
    }
    
    
        
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
       this.dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        featureComing();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        messagePrint();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        messageTotal();
    }//GEN-LAST:event_jButton5ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Messages.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Messages.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Messages.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Messages.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
            Messages messageWindow = new Messages();    
            messageWindow.setVisible(true);
            messageWindow.setLocationRelativeTo(null);
            ImageIcon icon = new ImageIcon("C:\\Users\\Sihle Mzamo\\Documents\\NetBeansProjects\\LoginAndSignUp\\src\\Icon\\KB.jpg");

        messageWindow.Welcome("Welcome to Kiwibuzz: The Kulumaring!", icon, 3000,80,80);
            }
        });
    
    }
        
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel3;
    // End of variables declaration//GEN-END:variables

}

